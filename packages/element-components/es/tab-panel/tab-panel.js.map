{"version":3,"file":"tab-panel.js","sources":["../../src/tab-panel/index.vue?vue&type=script&lang.ts","../../src/tab-panel/index.ts"],"sourcesContent":["\nimport Draggabilly from 'draggabilly';\nimport {\n    defineComponent,\n    ref,\n    reactive,\n    onMounted,\n    PropType,\n    nextTick,\n    onUnmounted,\n    ComponentPublicInstance,\n} from 'vue';\nimport { ElIcon } from 'element-plus';\nimport SymbolIcon from '../symbol-icon';\n\nexport interface Tab {\n    label: string;\n    key: string;\n    favico?: string;\n    icon?: string;\n\n    // 是否可关闭\n    closable?: boolean;\n    // 是否可被交换\n    swappable?: boolean;\n    // 是否可拖拽\n    dragable?: boolean;\n    $el?: HTMLElement;\n    // eslint-disable-next-line\n    _instance?: any;\n    _x?: number;\n}\n\nexport interface Refs {\n    [key: string]: Element | null;\n}\nexport default defineComponent({\n    name: 'tab-panel',\n    components: { ElIcon, SymbolIcon },\n    emits: ['click', 'update:modelValue', 'remove', 'dragstart', 'dragging', 'dragend', 'swap', 'contextmenu'],\n    props: {\n        modelValue: {\n            type: [String, Number],\n            default: '',\n        },\n        tabs: {\n            type: Array as PropType<Tab[]>,\n            default: () => [],\n        },\n        // 当宽度小于设置的值时，会自动隐藏关闭按钮\n        autoHiddenCloseIconWidth: {\n            type: Number,\n            default: 120,\n        },\n        // tab 的最小宽度\n        minWidth: {\n            type: Number,\n            default: 40,\n        },\n        // tab 的最大宽度\n        maxWidth: {\n            type: Number,\n            default: 245,\n        },\n        // 两个相邻的 tab 的空隙大小\n        gap: {\n            type: Number,\n            default: 7,\n        },\n        // backgroundColor: {\n        //     type: String,\n        //     default: '#dadde2',\n        // },\n        // 关闭事件\n        onClose: {\n            type: Function,\n        },\n        // 新 tab 追加时，是否追加到当前 tab 之后\n        insertToAfter: {\n            type: Boolean,\n            default: false,\n        },\n        // 鼠标按下时，是否自动将命中的 tab 设置为激活状态\n        isMousedownActive: {\n            type: Boolean,\n            default: true,\n        },\n    },\n    setup(props, context) {\n        const $refs = reactive<Refs>({});\n        const tabWidth = ref<number>(0);\n\n        // 计算单个 tab 的宽度\n        const calcTabWidth = () => {\n            const { tabs, minWidth, maxWidth, gap } = props;\n            const { $content } = $refs;\n            const afterWidth = $refs.$after?.getBoundingClientRect().width || 0;\n            if (!$content) return Math.max(maxWidth, minWidth);\n            const contentWidth: number = $content.clientWidth - gap * 3 - afterWidth;\n            let width: number = contentWidth / tabs.length;\n            width += gap * 2;\n            if (width > maxWidth) width = maxWidth;\n            if (width < minWidth) width = minWidth;\n            tabWidth.value = width;\n        };\n\n        /**\n         * 拖拽开始事件\n         * @param e 拖拽事件\n         * @param tab 当前正在拖拽的 tab\n         * @param i 当前拖拽的下标\n         */\n        const handlePointerDown = (e: Event, tab: Tab, i: number) => {\n            const { emit } = context;\n            const { isMousedownActive } = props;\n            // 如果允许按下就 active，才命中\n            if (isMousedownActive) {\n                emit('update:modelValue', tab.key);\n            }\n            emit('dragstart', e, tab, i);\n        };\n\n        /**\n         * 拖拽事件监听\n         * @param e 拖拽事件\n         * @param tab 当前正在拖拽的 tab\n         * @param i 当前拖拽的下标\n         */\n        const handleDragMove = (e: Event, tab: Tab, i: number) => {\n            const { tabs, gap } = props;\n            const { emit } = context;\n\n            if (tab.swappable === false) {\n                return;\n            }\n\n            // 获取一半 tab 宽度\n            const halfWidth = (tabWidth.value - gap) / 2;\n            // 获取 tab 当前的 x 值\n            const { x } = tab._instance.position;\n            let swapTab: Tab | null = null;\n            for (let i = 0; i < tabs.length; i++) {\n                const currentTab: Tab = tabs[i];\n                const targetX: number = (currentTab._x || 1) - 1;\n\n                // 如果命中自己本身，则无需交换\n                if (tab.key === currentTab.key) {\n                    // eslint-disable-next-line no-continue\n                    continue;\n                }\n                // 判断是否有重叠的 tab，只需要判定是否在前半部分即可\n                if (targetX <= x && x < targetX + halfWidth) {\n                    swapTab = currentTab;\n                    swapTabs(tab, swapTab);\n                    break;\n                }\n            }\n            emit('dragging', e, tab, i);\n        };\n\n        /**\n         * 交换俩 tab\n         * @param tab 当前 tab\n         * @param swapTab 需要交换的 tab\n         */\n        const swapTabs = (tab: Tab, swapTab: Tab) => {\n            if (swapTab.swappable === false) {\n                return;\n            }\n            const { tabs } = props;\n            const { emit } = context;\n\n            let index = -1;\n            let swapIndex = -1;\n\n            for (let i = 0; i < tabs.length; i++) {\n                const obj: Tab = tabs[i];\n                if (obj.key === tab.key) {\n                    index = i;\n                }\n                if (obj.key === swapTab.key) {\n                    swapIndex = i;\n                }\n            }\n\n            if (index < 0 || swapIndex < 0 || index === swapIndex) {\n                return;\n            }\n\n            // eslint-disable-next-line\n            [tabs[index], tabs[swapIndex]] = [tabs[swapIndex], tabs[index]];\n\n            // swap x\n            const { _x } = tab;\n            tab._x = swapTab._x;\n            swapTab._x = _x;\n\n            // swap position\n            const { _instance } = swapTab;\n            setTimeout(() => {\n                _instance.element.classList.add('move');\n                _instance.setPosition(_x, _instance.position.y);\n            }, 50);\n            setTimeout(() => {\n                _instance.element.classList.remove('move');\n                emit('swap', tab, swapTab);\n            }, 200);\n        };\n\n        /**\n         * 拖拽完成监听\n         * @param e 拖拽事件\n         * @param tab 命中的 tab\n         * @param i 当前拖拽的下标\n         */\n        const handleDragEnd = (e: Event, tab: Tab, i: number) => {\n            const { _instance } = tab;\n            const { emit } = context;\n\n            if (_instance.position.x === 0) return;\n            setTimeout(() => {\n                _instance.element.classList.add('move');\n                _instance.setPosition(tab._x, 0);\n            }, 50);\n            setTimeout(() => {\n                _instance.element.classList.remove('move');\n                emit('dragend', e, tab, i);\n            }, 200);\n            return false;\n        };\n\n        /**\n         * 单击事件监听\n         * @param e 单击事件\n         * @param tab 命中的 tab\n         * @param i 当前单击的下标\n         */\n        const handleClick = (e: Event, tab: Tab, i: number) => {\n            const { emit } = context;\n            emit('click', e, tab, i);\n        };\n\n        /**\n         * 原生点击事件\n         * @param e 单击事件\n         * @param tab 命中的 tab\n         * @param i 当前单击的下标\n         */\n        const handleNativeClick = (e: Event, tab: Tab, i: number) => {\n            if (tab.dragable === false) {\n                handleClick(e, tab, i);\n            }\n        };\n\n        /**\n         * 右键事件监听\n         * @param e 右键事件\n         * @param tab 命中的 tab\n         * @param i 当前右键的下标\n         */\n        const handleContextMenu = (e: Event, tab: Tab, i: number) => {\n            const { emit } = context;\n            emit('contextmenu', e, tab, i);\n        };\n\n        /**\n         * 删除事件\n         * @param tab 当前命中 tab\n         * @param i 当前命中 tab 的下标\n         */\n        const handleDelete = (tab: Tab, i: number) => {\n            const { tabs, modelValue, onClose } = props;\n            const { emit } = context;\n            const index = tabs.findIndex((item) => item.key === modelValue);\n\n            // 可以通过 onClose 返回 false 来主动阻止事件\n            if (typeof onClose === 'function' && onClose(tab, tab.key, i) === false) {\n                return false;\n            }\n\n            let after, before;\n            if (i === index) {\n                after = tabs[i + 1];\n                before = tabs[i - 1];\n            }\n\n            if (after) {\n                emit('update:modelValue', after.key);\n            } else if (before) {\n                emit('update:modelValue', before.key);\n            } else if (tabs.length <= 1) {\n                emit('update:modelValue', null);\n            }\n            tabs.splice(i, 1);\n            emit('remove', tab, i);\n\n            nextTick(() => {\n                doLayout();\n            });\n        };\n\n        /**\n         * 主动添加 tab\n         * @param newTabs 用户需要添加的 tab\n         */\n        const addTab = (tab: Tab) => {\n            const { insertToAfter, tabs } = props;\n            if (insertToAfter) {\n                const hastab = tabs.find((item) => item.key === tab.key);\n                if (hastab) return;\n\n                tabs.push(tab);\n            } else {\n                tabs.push(tab);\n            }\n\n            nextTick(() => {\n                init();\n                doLayout();\n            });\n        };\n\n        /**\n         * 主动移除 tab\n         * @param tabKey 如果为数字则判定为用下标删除\n         */\n        const removeTab = (tabKey: string | number) => {\n            const { tabs } = props;\n\n            if (typeof tabKey === 'number') {\n                const index: number = tabKey;\n                const tab = tabs[index];\n                handleDelete(tab, index);\n            } else {\n                const index: number = tabs.findIndex((item) => item.key === tabKey);\n                const tab: Tab | undefined = tabs.find((item) => item.key === tabKey);\n                if (tab) {\n                    handleDelete(tab, index);\n                }\n            }\n        };\n\n        // 计时器\n        let timer: number;\n        /**\n         * 窗口改变，重新布局\n         */\n        const handleResize = () => {\n            if (timer) window.clearTimeout(timer);\n            timer = window.setTimeout(() => {\n                doLayout();\n            }, 100);\n        };\n\n        /**\n         * 判断关闭按钮是否展示\n         */\n        const showTabCloseIcon = (tab: Tab) => {\n            const { modelValue, autoHiddenCloseIconWidth, tabs } = props;\n            if (tabs.length === 1) return false;\n\n            if (tab.closable === false) {\n                return false;\n            }\n\n            if (tab.key === modelValue) {\n                return true;\n            }\n\n            if (autoHiddenCloseIconWidth > tabWidth.value) {\n                return false;\n            }\n\n            return true;\n        };\n\n        /**\n         * 重新调整 tab 位置\n         */\n        const doLayout = () => {\n            calcTabWidth();\n            const { tabs, gap } = props;\n            tabs.forEach((tab, i) => {\n                const instance = tab._instance;\n                const _x = (tabWidth.value - gap * 2) * i;\n                tab._x = _x;\n                instance.setPosition(_x, 0);\n            });\n        };\n\n        /**\n         * 添加 tab 实例\n         * @param tab 当前命中 tab\n         * @param i 当前命中 tab 的下标\n         */\n        const addInstance = (tab: Tab, i: number) => {\n            const { gap } = props;\n\n            // 如果已经存在实例，则重新设置位置\n            if (tab._instance) {\n                tab._instance.setPosition(tab._x, 0);\n                return;\n            }\n            // 如果不存在 dom 元素，则无需设置\n            if (!tab.$el || !$refs.$content) {\n                return;\n            }\n            // 添加实例\n            tab._instance = new Draggabilly(tab.$el, {\n                axis: 'x',\n                containment: $refs.$content,\n                handle: '.tabs-main',\n            });\n            if (tab.dragable === false) {\n                tab._instance.disable();\n            }\n            // 计算实际 x 值\n            const x = (tabWidth.value - gap * 2) * i;\n            // 记录 x 位置到 tab 上\n            tab._x = x;\n            // 设置位置\n            tab._instance.setPosition(x, 0);\n            // 绑定拖拽事件\n            tab._instance.on('pointerDown', (e: Event) => handlePointerDown(e, tab, i));\n            tab._instance.on('dragMove', (e: Event) => handleDragMove(e, tab, i));\n            tab._instance.on('dragEnd', (e: Event) => handleDragEnd(e, tab, i));\n            tab._instance.on('staticClick', (e: Event) => handleClick(e, tab, i));\n        };\n\n        /**\n         * 初始化，为 tab 添加实例\n         */\n        const init = () => {\n            props.tabs.forEach((tab: Tab, i: number) => {\n                addInstance(tab, i);\n            });\n        };\n\n        /**\n         * 为 Tab 添加 dom 节点\n         * @param el 当前 tab 对应的 dom 元素\n         * @param tab 当前命中 tab\n         */\n        const setTabRef = (el: Element | ComponentPublicInstance | null, tab: Tab) => {\n            if (el) {\n                tab.$el = el as HTMLElement;\n            }\n        };\n\n        /**\n         * 添加容器 dom 节点\n         * @param el tab 对应的 dom 父元素\n         */\n        const setContentRef = (el: Element | ComponentPublicInstance | null) => {\n            if (el) {\n                $refs.$content = el as Element;\n            }\n        };\n\n        /**\n         * 添加后缀元素 dom 节点\n         * @param el 在 tab 后面的元素\n         */\n        const setAfterRef = (el: Element | ComponentPublicInstance | null) => {\n            if (el) {\n                $refs.$after = el as Element;\n            }\n        };\n\n        onMounted(() => {\n            calcTabWidth();\n            init();\n            window.addEventListener('resize', handleResize);\n        });\n\n        onUnmounted(() => {\n            window.removeEventListener('resize', handleResize);\n            if (timer) window.clearTimeout(timer);\n        });\n\n        return {\n            setTabRef,\n            setContentRef,\n            setAfterRef,\n            tabWidth,\n            handleDelete,\n            handleContextMenu,\n            showTabCloseIcon,\n            handleNativeClick,\n            doLayout,\n            init,\n            addTab,\n            removeTab,\n        };\n    },\n});\n","import { withInstall } from '@aoe/utils';\nimport TabPanel from './index.vue';\n\nexport const AoeTabPanel = withInstall(TabPanel);\nexport default AoeTabPanel;\n"],"names":["SymbolIcon","i"],"mappings":"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"}